# This workflow will install Python dependencies, run tests and lint.
# For more information see: https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-python

name: Test Python application

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        # Test all supported Python versions under Ubuntu
        os: [ubuntu-latest]
        python-version: ['3.12', '3.13']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_dev.txt
    - name: Lint with ruff
      run: |
        # stop the build if there are Python syntax errors or undefined names
        ruff check --select=E9,F63,F7,F82
        # exit-zero treats all errors as warnings
        ruff check --exit-zero --statistics
    - name: Install project
      run: |
        pip install .
    - name: Run tests
      run: |
        pytest
    - name: Check version bump against main
      run: |
        # Checkout main branch to temp directory
        git fetch origin main
        git show origin/main:pyproject.toml > pyproject_main.toml
        # Extract version from both files
        VERSION_CURRENT=$(grep '^version' pyproject.toml | head -1 | cut -d'=' -f2 | tr -d ' "')
        VERSION_MAIN=$(grep '^version' pyproject_main.toml | head -1 | cut -d'=' -f2 | tr -d ' "')
        echo "Current version: $VERSION_CURRENT"
        echo "Main version: $VERSION_MAIN"
        if [ "$VERSION_CURRENT" = "$VERSION_MAIN" ]; then
          echo "Version has not been bumped compared to main!"
          exit 1
        fi
        echo "Version bump detected."
